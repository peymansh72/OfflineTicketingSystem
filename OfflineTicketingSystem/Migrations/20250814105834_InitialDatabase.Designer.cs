// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OfflineTicketingSystem.Data;

#nullable disable

namespace OfflineTicketingSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814105834_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("OfflineTicketingSystem.Data.Entities.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("OfflineTicketingSystem.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65258150-e28c-44e5-9dc5-a1586771f664"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df114fa2-0127-4789-961b-c8bd0b6582a3",
                            Email = "admin@bargheto.com",
                            EmailConfirmed = false,
                            FullName = "Admin User",
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$0rK0qFavEUsbtfetjYl6gO3dFDAQoGA9PYxdCXp0RmSrDpizi7.Te",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("d07443a3-87d2-4156-9417-abb8591bd56a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8e67ae4-bd82-4089-a419-302c5e572585",
                            Email = "p.sharifi@bargheto.com",
                            EmailConfirmed = false,
                            FullName = "Peyman Sharifi",
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$C64AbzPVsZpJRWWl7kr7/.UeyCU9vngMJso2F92GF1JHyb4dkgn5W",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("OfflineTicketingSystem.Data.Entities.TicketEntity", b =>
                {
                    b.HasOne("OfflineTicketingSystem.Data.Entities.UserEntity", "AssignedToUser")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OfflineTicketingSystem.Data.Entities.UserEntity", "CreatedByUser")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("OfflineTicketingSystem.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("CreatedTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
